cmake_minimum_required(VERSION 3.5)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(rtc_is_subproject OFF)
if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
  set(rtc_is_subproject OFF)
endif()

project(webrtc)

if(UNIX AND NOT APPLE)
  set(LINUX TRUE)
endif()
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  message(STATUS "using clang compiler")
  set(using_clang ON)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  message(STATUS "using gnu compiler")
  set(using_gcc ON)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  message(STATUS "using intel c++ compiler")
  set(using_intel ON)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  message(STATUS "using msvc compiler")
  set(using_msvc ON)
endif()

# Directory for output files

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/lib 
  CACHE PATH "Output directory for static libraries.")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/lib
  CACHE PATH "Output directory for shared libraries.")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/bin
  CACHE PATH "Output directory for executables and DLL's.")

set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_STANDARD 14)

#======================= webrtc options =================================
option(rtc_build_win "build win" ON)
option(rtc_build_android "build android" OFF)
option(rtc_build_fuchsia "build fuchsia" OFF)
option(rtc_build_ios "build ios" OFF)
option(rtc_build_mac "build ios" OFF)
option(rtc_enable_protobuf "enable proto buf" OFF)
option(rtc_include_tests "include tests" OFF)
option(rtc_build_linux "build win" OFF)
option(rtc_restrict_logging "restrict logging" ON)
option(rtc_include_internal_audio_device "internal audio device" OFF)
option(rtc_libvpx_build_vp9 "build vp9" OFF)
option(rtc_enable_sctp "enable scpt" ON)
option(rtc_enable_external_auth "enable external auth" OFF)
option(rtc_use_builtin_sw_codecs "use built in software codecs" OFF)
option(rtc_buildfor_arm64 "build for arm64" OFF)
option(rtc_buildfor_arm "build for arm" OFF)
option(rtc_build_ssl "build rtc ssl" ON)
option(rtc_enable_libevent "enable libevent" OFF)

#======================= end webrtc options =================================

#definitions
list(APPEND rtc_definitions "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=0")
if(UNIX)
  list(APPEND rtc_definitions "WEBRTC_POSIX")
endif()
if(APPLE)
  list(APPEND rtc_definitions "WEBRTC_MAC")
endif()
if(LINUX)
  list(APPEND rtc_definitions "WEBRTC_LINUX")
endif()
if(rtc_build_ios)
  list(APPEND rtc_definitions "WEBRTC_IOS")
endif()
if(rtc_build_fuchsia)
  list(APPEND rtc_definitions "WEBRTC_FUCHSIA")
endif()
if(rtc_build_win OR using_msvc)
  list(APPEND rtc_definitions "WEBRTC_WIN" "_CRT_SECURE_NO_WARNINGS" "NOMINMAX" "_UNICODE" "UNICODE" "_WINSOCKAPI_" "WIN32_LEAN_AND_MEAN" )
endif()
if(rtc_build_android)
  list(APPEND rtc_definitions "WEBRTC_LINUX" "WEBRTC_ANDROID")
endif()
if(rtc_enable_protobuf)
  list(APPEND rtc_definitions "WEBRTC_ENABLE_PROTOBUF=1")
else()
  list(APPEND rtc_definitions "WEBRTC_ENABLE_PROTOBUF=0")  
endif()
if(rtc_restrict_logging)
  list(APPEND rtc_definitions "WEBRTC_RESTRICT_LOGGING")
endif()
if(rtc_include_internal_audio_device)
  list(APPEND rtc_definitions "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE")
endif()
if(NOT rtc_libvpx_build_vp9)
  list(APPEND rtc_definitions "RTC_DISABLE_VP9")
endif()
if(rtc_enable_sctp)
  list(APPEND rtc_definitions "HAVE_SCTP")
endif()
if(rtc_enable_external_auth)
  list(APPEND rtc_definitions "ENABLE_EXTERNAL_AUTH")
endif()
if(rtc_use_builtin_sw_codecs)
  list(APPEND rtc_definitions "USE_BUILTIN_SW_CODECS")
endif()
if(rtc_buildfor_arm64)
  list(APPEND rtc_definitions "WEBRTC_ARCH_ARM64" "WEBRTC_HAS_NEON")
endif()
if(rtc_buildfor_arm64)
  list(APPEND rtc_definitions "WEBRTC_ARCH_ARM")
  #TODO: add definitions for version and neon WEBRTC_ARCH_ARM_V7 WEBRTC_HAS_NEON
endif()
if (rtc_enable_protobuf)
  list(APPEND rtc_definitions "ENABLE_RTC_EVENT_LOG")
endif()
#end definitions

#compiler options
if(UNIX)
  list(APPEND rtc_compile_options_c "-Wextra" "-Wno-unused-parameter" "-Wno-missing-field-initializers" "-Wno-strict-overflow")
  list(APPEND rtc_compile_options_cxx "--Wnon-virtual-dtor" "-Woverloaded-virtual")
endif()
if(using_clang)
  list(APPEND rtc_compile_options_c  "-Wc++11-narrowing" "-Wimplicit-fallthrough" "-Wthread-safety" "-Winconsistent-missing-override" "-Wundef")
endif()
if(rtc_build_android AND NOT using_clang)
  list(APPEND rtc_compile_options_c "-fno-builtin-cos" "-fno-builtin-sin" "-fno-builtin-cosf" "-fno-builtin-sinf")
endif()
#end compiler options


#subfolders


add_subdirectory(rtc_base)
#[[
add_subdirectory(api)
add_subdirectory(audio)
add_subdirectory(call)
add_subdirectory(common_audio)
add_subdirectory(common_video)
add_subdirectory(media)
add_subdirectory(modules)
add_subdirectory(ortc)
add_subdirectory(sdk)
add_subdirectory(system_wrappers)
add_subdirectory(video)
add_subdirectory(logging)
add_subdirectory(p2p)
add_subdirectory(pc)
add_subdirectory(stats)
]]
#end subfolders
target_compile_definitions(rtc_base PUBLIC ${rtc_definitions})
#include dirs
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(audio)
include_directories(call)
include_directories(common_audio)
include_directories(common_video)
include_directories(media)
include_directories(modules)
include_directories(ortc)
include_directories(rtc_base)
include_directories(sdk)
include_directories(system_wrappers)
include_directories(video)
include_directories(logging)
include_directories(p2p)
include_directories(pc)
include_directories(stats)
#end include dirs


set(RTC_SRC "common_types.cc")


add_library(${PROJECT_NAME} STATIC ${RTC_SRC})
target_link_libraries(${PROJECT_NAME} rtc_base)
target_compile_options(${PROJECT_NAME} PUBLIC ${rtc_compile_options_c} ${rtc_compile_options_cxx})
target_compile_definitions(${PROJECT_NAME} PUBLIC ${rtc_definitions})
